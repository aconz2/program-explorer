#!/bin/busybox sh

#set -e

export PATH=/bin

# otherwise we get a kernel panic and the vmm process hangs
trap "busybox poweroff -f" EXIT

# crun needs /proc/self/exe for stuff, cgroup_root for containers, and devtmpfs for mounting our sqfs
busybox mount -t proc none /proc
busybox mount -t cgroup2 none /sys/fs/cgroup
busybox mount -t devtmpfs none /dev

# this works!
# busybox inotifyd - /dev:n &
#
# busybox ls -l /dev/pmem*

#busybox mount -t squashfs -o loop /dev/vda /run/bundle/rootfs
busybox mount -t squashfs -o loop /dev/pmem0 /mnt/rootfs

busybox mount -t squashfs -o loop /dev/pmem1 /run/input

busybox mount -t tmpfs -o size=2M,mode=777 none /run/output
busybox mkdir --mode 777 /run/output/dir

# busybox mount -t tmpfs -o size=2M none /mnt/upper/scratch

# overlay writable /{scratch,input,output} dirs
busybox mount -t overlay -o lowerdir=/mnt/rootfs,upperdir=/mnt/upper,workdir=/mnt/work none /run/bundle/rootfs

busybox ls -l /
busybox ls -l /run/
# busybox ls -l /run/io/input/dir
# busybox ls -l /run/bundle
# busybox ls -l /run/bundle/rootfs

pivot_rootfs /abc \
  /bin/crun run --bundle /run/bundle containerid-1234 \
  < /run/input/stdin \
  > /run/output/stdout \
  2> /run/output/stderr

echo $? > /run/output/exit

echo '---------from guest--------------'
echo '-------- stdout -----------'
busybox cat /run/output/stdout
echo '---------------------------'

echo '-------- stderr -----------'
busybox cat /run/output/stderr
echo '---------------------------'

# busybox ls -l /run/io/output
# for f in /run/io/output/*; do
#   echo "$f"
#   busybox cat "$f"
# done
# TODO this should probably run as a different user too
# (cd /run/output; busybox find . -print -depth | busybox cpio -H newc -ov > /dev/pmem2)
