virt-customize -a ~/Downloads/Fedora-Cloud-Base-Generic.x86_64-40-1.14.qcow2 --root-password password:hello
qemu-system-x86_64 -smp 2 -enable-kvm -m 2048 -drive file=~/Downloads/Fedora-Cloud-Base-Generic.x86_64-40-1.14.qcow2

taskset -c 0 hyperfine --shell=none --warmup=500 --runs=1000 'gcc --version'

kata not supported with podman 


# had to get the full to get runc. using containerd not from dnf because outside toolbox.
wget https://github.com/containerd/nerdctl/releases/download/v1.7.6/nerdctl-full-1.7.6-linux-amd64.tar.gz
wget https://github.com/containerd/containerd/releases/download/v1.7.18/containerd-1.7.18-linux-amd64.tar.gz
# tar -xf ...

from inside toolbox wasn't working, was getting
FATA[0009] failed to extract layer sha256:d3e8d42f967c9c00049f90237e1bf4a460d18c28895292d2bb4a0702f661a745: failed to mount /var/lib/containerd/tmpmounts/containerd-mount2679852185: invalid argument: unknown 

outside toolbox
sudo bin/containerd
→ sudo ln -s $(readlink -f bin/runc) /usr/local/bin/runc
sudo ./nerdctl run --rm --network=none gcc:14.1.0 gcc --version

→ sudo ./nerdctl run --runtime io.containerd.kata.v2 --rm --network=none gcc:14.1.0 gcc --version

/usr/share/kata-containers/defaults/configuration.toml: file /var/cache/kata-containers/vmlinuz.container does not exist

this is saying the kernel isn't there

wget https://github.com/kata-containers/kata-containers/releases/download/3.6.0/kata-static-3.6.0-amd64.tar.xz
tar -xf -C kata-static-3.6.0-amd64
→ sudo ln -s $(readlink -f kata-static-3.6.0-amd64/kata/share/kata-containers/kata-containers-initrd.img) /var/cache/kata-containers/kata-containers-initrd.img
→ sudo ln -s $(readlink -f kata-static-3.6.0-amd64/kata/share/kata-containers/vmlinuz.container) /var/cache/kata-containers/vmlinuz.container

get vmlinuz and initramfs from image 
→ virt-get-kernel -a ~/Downloads/Fedora-Cloud-Base-Generic.x86_64-40-1.14.qcow2 
vmlinuz is a compressed version of the whole linux kernel
initramfs 

https://mergeboard.com/blog/2-qemu-microvm-docker/
https://gist.github.com/mikaelhg/7a67901affe56bdf22eb398606945a23
https://github.com/qemu/qemu/blob/master/docs/system/i386/microvm.rst
https://documentation.suse.com/sles/12-SP5/html/SLES-all/cha-qemu-running.html

/dev/sd* is scsi
/dev/hd* is hard drive
/dev/vd* is virtualized

blkid in the rescue shell works
cat /proc/mounts
shows that:
/dev/vda1 label=p.legacy
/dev/vda2 label=dfi
/dev/vda3 label=boot type=ext4
/dev/vda4 label=fedora type=btrfs
trying with -append "root=/dev/vda{1,2,3,4}" didn't work, 3 and 4 didn't blow up with file type errors but not /sysroot or something

→ virt-cat -a ~/Downloads/Fedora-Cloud-Base-Generic.x86_64-40-1.14.qcow2 /etc/default/grub
GRUB_CMDLINE_LINUX_DEFAULT="no_timer_check net.ifnames=0 console=tty1 console=ttyS0,115200n8 rootflags=subvol=root"

with /dev/vda4
/sysroot has /root /home and /var
btrfs sub list /sysroot shows these are subvolumes

look in bootbasic2.sh for working examples

EDITOR=vi virt-edit fedora-cloud-base.raw /usr/local/bin/boot.sh

→ virt-cat fedora-cloud-base.raw /etc/systemd/system/myboot.service
[Unit]
Description=My boot service

[Service]
Type=oneshot
ExecStart=/usr/local/bin/boot.sh
StandardOutput=journal+console

[Install]
WantedBy=multi-user.target

zcat kata-alpine-3.18.initrd | cpio -t

rdinit=/bin/bash

https://github.com/jqueuniet/docker-to-initramfs/blob/master/context/init

inside podman run --rm -it alpine:3.20.1
apk add linux-lts
mkinitfs --help
cat /etc/mkinitfs/mkinitfs.conf
cat /usr/share/mkinitfs/initramfs-init

wget https://raw.githubusercontent.com/torvalds/linux/master/scripts/extract-ikconfig
wget https://raw.githubusercontent.com/torvalds/linux/master/scripts/extract-vmlinux
bash extract-ikconfig ~/Downloads/kata-static-3.6.0-amd64/kata/share/kata-containers/vmlinux-6.1.62-132
bash extract-vmlinux alpine/vmlinuz-lts > alpine/vmlinux-lts
# https://wiki.gentoo.org/wiki/Custom_Initramfs

virt-df alpine/nocloud_alpine-3.20.1.raw

mkdir iso
sudo mount -t auto -o loop alpine-virt-3.20.1-x86_64.iso iso
less iso/boot/config-6.6.34-1-virt

→ git clone --single-branch --branch v6.6 --depth 1 https://github.com/torvalds/linux
$ wget https://raw.githubusercontent.com/cloud-hypervisor/cloud-hypervisor/main/resources/linux-config-x86_64
cp linux-config-x86_64 .config
make -j vmlinux

wget https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-nocloud-amd64.qcow2
qemu-img convert debian-12-nocloud-amd64.qcow2 debian-12-nocloud-amd64.raw  # 2 GB!
wget https://github.com/cloud-hypervisor/cloud-hypervisor/releases/download/v40.0/cloud-hypervisor-static
chmod +x cloud-hypervisor-static

wget https://github.com/wagoodman/dive/releases/download/v0.12.0/dive_0.12.0_linux_amd64.tar.gz
dive --source podman distroless/static-debian12
make -j vmlinux

okay can use bash makecpioinit.sh to create an initramfs with busybox
using #!/bin/busybox as the shebang line ran busybox as the init, not my shell script
so use #!/bin/busybox sh

wget https://www.busybox.net/downloads/binaries/1.35.0-x86_64-linux-musl/busybox

vsock uses a context identifier cid and a port. cid is assigned at vm start time and is unique per vm.
from inside the guest, connecting to the host is always with cid=2.
we can have many connections, one per port, and per cid / sock

todo could get cloud hypervisor to catch kernel panics with --pvpanic and --event-monitor but not sure this actually exits, I think the process still needs to exit/kill

mkdir /tmp/gcc
id=$(podman create docker.io/library/gcc:14.1.0)
podman export "$id" | tar -xC /tmp/gcc
mksquashfs /tmp/gcc gcc-squashfs.sqfs
podman rm "$id"

id=$(podman create docker.io/library/gcc:14.1.0)
podman export "$id" | sqfstar gcc-14.sqfs
podman rm "$id"

sudo mount -t squashfs -o loop gcc-squashfs.sqfs /tmp/gcc-mnt
mkfs.ext4 -d /tmp/gcc gcc-ext4.img 2g

was getting mount: mounting /dev/vda on /mnt/bundle/rootfs failed: No such device
updated linux config with CONFIG_MISC_FILESYSTEMS=y
make menuconfig
Filesystems > misc filesystems > squashfs

now getting a crun error could not join cgroup
b/c /proc/self/cgroup is empty
was because needed to use mount -t cgroup2

was getting pivot_root: invalid argument
# https://github.com/containers/crun/issues/56 pivot_root appears to not work with tmpfs apparently is unsafe?
maybe workaround https://github.com/containers/bubblewrap/issues/592
some more notes
https://news.ycombinator.com/item?id=23167383

okay I could make an ext4 image from the cpio, but cloud hypervisor doesn't support --disk multiple times, so we couldn't mount an ext4 rootfs and a container bundle squashfs anyways!

okay so it looks like kata switches off pivot_root when using the agent as init, as seen in sandbox, it sends that config off to crio or runc so we don't actually see that codepath.
https://kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt says
both initrd and initramfs are cpio so we can't quite tell just from file
busybox mount shows we have rootfs on / both before and after the magic switcheroo configuration
crun does pivot_root . .
lets verify that with strace
building strace static needed LDFLAGS='-static' and dnf install glibc-static

got gdb server running with qemu by using -gdb tcp::1234 (two fing colons was getting no error about it)
add -device pvpanic-pci so that it exits on shutdown
use -S so it pauses at startup
can't use pvpanic with microvm, but thats okay

connect with lldb -o 'gdb-remote localhost:1234' ~/Repos/linux/vmlinux
search for symbols with
image lookup -r -n '.*pivot_root.*'
break set -r '.*pivot_root.*'
then 'c' to continue
but our breakpoint isn't being hit! b/c its not being set error: 34 sending the breakpoint request

building kernel with debug info CONFIG_DEBUG_INFO=y CONFIG_DEBUG_INFO_SPLIT=y
this produces .dwo files spread around the dir
use hardware breakpoints and disable kaslr
the symbol we're actually hitting is __x64_sys_pivot_root

okay so I think a bare pivot_root at / of pivot_root . . fails because new_mnt->mnt_flags has MNT_LOCKED
we don't seem to actually need an unshare

/proc/<pid|self>/mountinfo
https://www.kernel.org/doc/Documentation/filesystems/proc.txt

for getting crun to build statically:
dnf install libseccomp-static libcap-static glibc-static
CFLAGS='-static -Wl,-static' ./configure --disable-systemd --enable-embedded-yajl && make --trace

okay getting seccomp violation --seccomp log and syscall=72 by looking in journalctl
this is fcntl and no idea why, shows for vmm,vcpu0,__console,__rng like all the things

tried putting the sqfs image in the initramfs and it wasn't working and was slower anyways to boot even without running

for cloud-hypervisor
cargo build --profile=profiling --target x86_64-unknown-linux-musl

→ venv/bin/python -i analyzesqfs.py gcc-13.3.0.sqfs gcc-14.1.0.sqfs 
gcc-13.3.0.sqfs     421.45 Mb (compressed)    1347.61 Mb (uncompressed)      22806 files       2850 dirs
gcc-14.1.0.sqfs     432.04 Mb (compressed)    1381.28 Mb (uncompressed)      22894 files       2852 dirs
20179     832.07 Mb shared 60.24%

under normal circumstances, the vmm unlinks /tmp/ch.sock BUT then what is that even for, it binds it and listens

trying to figure out why busybox doesn't have the uuid in blkid
on my system doing
sudo strace --trace=open,openat,read blkid --cache-file /dev/null |& less 

was trying to do this from within the toolbox container and blkid wasn't getting enough permissions
solution was to
→ sudo podman run --privileged --rm -it fedora

hmm I think its getting the label from somehwere deep

you can use multiple disks! with --disk path=gcc-14.1.0.sqfs,readonly=on,id=gcc14 path=gcc-13.3.0.sqfs,readonly=on,id=gcc13

pmem file has to be aligned to 2MB (I think so it can be hugepaged even though we don't have to run with hugepages)
okay getting a sigbus when using --memory size=1024M,hugepages=on
is at /dev/pmem0
find /run/bundle/rootfs > /dev/null
  with pmem0 is 240ms
  with vda   is 265ms

how does the guest get notified of hotplug events?

okay you can just write to /dev/pmem. opening in append mode doesnt actually append
